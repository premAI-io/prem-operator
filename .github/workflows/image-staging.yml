#
name: (staging) Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the branch called `release`.
on:
  pull_request:
  push:
    branches: ['master']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain, and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ${{ secrets.STAGING_SERVER }}
  IMAGE_NAME: saas-controller/controller

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: arc-runner
    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update \
          && sudo apt-get install -y software-properties-common \
          && sudo apt-get update \
          && sudo add-apt-repository -y ppa:git-core/ppa \
          && sudo apt-get update \
          && sudo apt-get install -y git wget make curl
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.17.0'
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-tags: true
      - name: Get tags
        run: git fetch --tags origin
      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ secrets.STAGING_SERVER }}
          username: ${{ secrets.STAGING_DOCKER_USERNAME }}
          password: ${{ secrets.STAGING_DOCKER_PASSWORD }}
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-{{date 'YYYYMMDDHHmmss'}}
            type=semver,pattern={{raw}}
            type=sha,suffix=-{{date 'YYYYMMDDHHmmss'}}
          flavor: |
            latest=auto
            prefix=
            suffix=
      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Push Helm chart
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          wget https://github.com/arttor/helmify/releases/download/v0.4.10/helmify_Linux_x86_64.tar.gz -O helmify.tar.gz
          tar -xvf helmify.tar.gz
          chmod +x helmify
          sudo mv helmify /usr/bin/helmify
          make helm-controller
          version="0.0.1-$(date +%s)"
          echo "Packaging version $version"
          #version="0.0.1+main-${GITHUB_SHA:0:7}-$(date +%s)"
          app_version="0.0.1"
          echo "${{ secrets.STAGING_DOCKER_PASSWORD }}" | helm registry login ${{ secrets.STAGING_SERVER }} -u '${{ secrets.STAGING_DOCKER_USERNAME }}' --password-stdin
          helm package --version "${version}" --app-version $app_version charts/saas-controller
          helm push saas-controller-${version}.tgz oci://${{ env.REGISTRY }}/saas-controller
